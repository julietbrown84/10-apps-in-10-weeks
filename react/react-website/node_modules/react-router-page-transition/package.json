{
  "_args": [
    [
      {
        "raw": "react-router-page-transition",
        "scope": null,
        "escapedName": "react-router-page-transition",
        "name": "react-router-page-transition",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jbrown/Sites/10-apps-in-10-weeks/react/react-website"
    ]
  ],
  "_from": "react-router-page-transition@latest",
  "_id": "react-router-page-transition@3.0.2",
  "_inCache": true,
  "_location": "/react-router-page-transition",
  "_nodeVersion": "6.8.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-router-page-transition-3.0.2.tgz_1486305424828_0.2664261474274099"
  },
  "_npmUser": {
    "name": "trungdq88",
    "email": "trungdq88@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-router-page-transition",
    "scope": null,
    "escapedName": "react-router-page-transition",
    "name": "react-router-page-transition",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-router-page-transition/-/react-router-page-transition-3.0.2.tgz",
  "_shasum": "bc769458fa20659b5f86313014d83266bf089e2b",
  "_shrinkwrap": null,
  "_spec": "react-router-page-transition",
  "_where": "/Users/jbrown/Sites/10-apps-in-10-weeks/react/react-website",
  "author": {
    "name": "Trung Dinh Quang"
  },
  "babel": {
    "presets": [
      "es2015",
      "react"
    ]
  },
  "bugs": {
    "url": "https://github.com/trungdq88/react-router-page-transition/issues"
  },
  "config": {
    "buildDir": "./demo-build",
    "devHost": "localhost",
    "devPort": 8232
  },
  "dependencies": {
    "promise-queue": "^2.2.3"
  },
  "description": "Highly customizable page transition component for your your React Router",
  "devDependencies": {
    "autoprefixer": "^6.3.6",
    "babel-cli": "^6.9.0",
    "babel-core": "^6.10.4",
    "babel-eslint": "^6.1.0",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.5.0",
    "css-loader": "^0.23.1",
    "eslint": "^2.13.1",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-import": "^1.9.2",
    "eslint-plugin-jsx-a11y": "^1.5.3",
    "eslint-plugin-react": "^5.2.2",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.8.5",
    "less": "^2.7.1",
    "less-loader": "^2.2.3",
    "opn": "^4.0.2",
    "postcss-loader": "^0.9.1",
    "randomcolor": "^0.4.4",
    "react": "^15.1.0",
    "react-dom": "^15.1.0",
    "react-hot-loader": "^1.3.0",
    "react-router": "^2.5.2",
    "rx": "^4.1.0",
    "style-loader": "^0.13.1",
    "template-html-loader": "0.0.3",
    "url-loader": "^0.5.7",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1"
  },
  "directories": {},
  "dist": {
    "shasum": "bc769458fa20659b5f86313014d83266bf089e2b",
    "tarball": "https://registry.npmjs.org/react-router-page-transition/-/react-router-page-transition-3.0.2.tgz"
  },
  "gitHead": "2a30625a0930b406b9819daf48233adf10c66233",
  "homepage": "https://github.com/trungdq88/react-router-page-transition",
  "keywords": [
    "react",
    "react-router",
    "transition",
    "page",
    "route"
  ],
  "license": "ISC",
  "main": "lib/PageTransition.js",
  "maintainers": [
    {
      "name": "trungdq88",
      "email": "trungdq88@gmail.com"
    }
  ],
  "name": "react-router-page-transition",
  "optionalDependencies": {},
  "readme": "# React Router Page Transition\nHighly customizable page transition component for your React Router\n\n# Introduction\n\n**React Router** is awesome, but doing transition between pages is hard, especially for complex ones.\n\nNo worries **react-router-page-transition** is here to help. You can use css to define your own transition\neffect with custom data and callbacks, so now you can apply cool technique like [FLIP your animation](https://aerotwist.com/blog/flip-your-animations/)\nand implement cool transitions like this:\n\n**Live demo**: https://trungdq88.github.io/react-router-page-transition/\n\n|Simple|Material|Reveal|\n|------|--------|------|\n|![rrpt-leave](https://cloud.githubusercontent.com/assets/4214509/22519594/709cbdc6-e8e3-11e6-9e35-1182e6121e27.gif)|![material](https://cloud.githubusercontent.com/assets/4214509/16781947/aa83ca34-48a7-11e6-8c93-dfdd794d7a28.gif) | ![reveal](https://cloud.githubusercontent.com/assets/4214509/16783423/1c58b880-48ae-11e6-97fb-5e92a7da1b40.gif)|\n\n# Installation\n\n    npm install react-router-page-transition --save\n\n# Add to your project\n\n```js\nimport PageTransition from 'react-router-page-transition';\n```\n\n```jsx\n<PageTransition>\n  {this.props.children}\n</PageTransition>\n```\n- **Important:** `this.props.children` **must have** `transition-item` class in its root element. Example if you are passing `<ListPage />` as `this.props.children`:\n\n```jsx\nexport default class ListPage extends React.Component {\n  render() {\n    return (\n      <div id=\"list-page\" class=\"transition-item\">\n      ...\n      </div>\n    );\n  }\n}\n```\n\n# How it works\n\n- `PageTransition` component renders `{this.props.children}` inside a `<div class=\"transition-wrapper\">...</div>`.\n\n- When the route change, CSS classes will be added as following:\n\n![image](https://cloud.githubusercontent.com/assets/4214509/22550195/903cb304-e981-11e6-8a36-c6e0d1a28e94.png)\n\n- You'll need to define the transition in your CSS:\n\nExample: sliding animation\n\n```less\n.detail-page {\n  overflow: auto;\n  box-sizing: border-box;\n  padding: 20px;\n  height: 100vh;\n  background-color: #03a9f4;\n  transition: transform 0.5s, opacity 0.5s;\n\n  &.transition-appear {\n    opacity: 0;\n    transform: translate3d(100%, 0, 0);\n  }\n\n  &.transition-appear.transition-appear-active {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n  &.transition-leave {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n\n  &.transition-leave.transition-leave-active {\n    opacity: 0;\n    transform: translate3d(100%, 0, 0);\n  }\n}\n\n```\n\nSometimes it is impossible to implement your designer's awesome animation idea in just **only CSS**. In that case, you'll need the callbacks to customize your animation with **additional data**. See **API** document and example for more information.\n\n# API\n\n## Properties\n- **timeout**: transition duration in milisecond, this must be the same with the `transition-duration` in your CSS.\n\n   Example:\n    ```jsx\n        <PageTransition timeout={500}>\n          {props.children}\n        </PageTransition>\n    ```\n\n- **data**: custom data to send to the page component via `onTransitionWillStart`, `onTransitionDidEnd`, `transitionManuallyStart`, `transitionManuallyEnd`.\n\n    Example:\n    ```jsx\n        <PageTransition\n          data={{ clickedItemData: this.state.clickedItemData }}\n        >\n          {this.props.children}\n        </PageTransition>\n    ```\n\n- **onLoad**: this callback will be call after the new page is finished replaced.\n\n    Example:\n    ```jsx\n        <PageTransition\n          onLoad={() => this.refs.scrollArea.scrollTop = 0}\n        >\n          {this.props.children}\n        </PageTransition>\n    ```\n\n## Callback on children component\n`PageTransition` component calls a several callbacks to its child component to pass user defined additional data for the animation. Child components are mounted via React Router when the route change.\n\n**Notice:** all these callbacks will be called in a **Promise chain**, so if you are handleing async tasks inside the callback (for example `setState`), make sure you **return a Promise** to make everything work properly.\n\n- **onTransitionWillStart(data)**: before the transition starts (before `transition-appear-active` class is added). `data` is the variable received from the `data` property of `PageTransition`.\n- **transitionManuallyStart(data)**: if you don't use `transition-appear-active` class in CSS to animate your page, you can define this method in the child component to do the animation mannually. `transition-appear-active` will not be added to the child's DOM when this method exists.\n- **onTransitionDidStart(data)**: after the transition started.\n- **onTransitionWillEnd(data)**: before the transition stops (before `transition-appear-active` class is removed).\n- **transitionManuallyStop(data)**: similar to `transitionManuallyStart`. `transition-appear-active` will not be removed to the child's DOM when this method exists.\n- **onTransitionDidEnd(data)**: after the transition stopped (after `transition-appear-active` class is removed)\n\n    Example:\n    ```jsx\n    export default class DetailPage extends React.Component {\n      ...\n      onTransitionWillStart(data) {\n        return new Promise(resolve => {\n            this.setState({ animating: false, postiton: data.position, opacity: 0 }, resolve);\n        });\n      }\n      transitionManuallyStart(data) {\n        return new Promise(resolve => {\n            this.setState({ animating: true, postiton: DEFAULT_POSITION, opacity: 1 }, resolve);\n        });\n      }\n      onTransitionDidStart(data) {\n        // Animation is happening\n      }\n      onTransitionWillEnd(data) {\n        // Animation is about to stop\n      }\n      transitionManuallyStop(data) {\n        return new Promise(resolve => {\n            this.setState({ animating: false }, resolve);\n        });\n      }\n      onTransitionDidEnd(data) {\n        // Page successfully replaced and finished animate\n        this.callMyBusinessApi();\n      }\n\n      ...\n    ```\n\nSimilar callbacks for **leave** event:\n\n- onTransitionLeaveWillStart(data)\n- transitionLeaveManuallyStart(data)\n- onTransitionLeaveDidStart(data)\n- onTransitionLeaveWillEnd(data)\n- transitionLeaveManuallyStop(data)\n- onTransitionLeaveDidEnd(data)\n\n## Available CSS functional class names\n\n- `transition-appear`, `transition-appear-active`, `transition-leave`, `transition-leave-active`.\n- Root element of the transited page must have `transition-item` class.\n\n## Using with Redux\n\nBy default, `PageTransition` will animates its children when `componentWillReceiveProps` is triggered. It compares `this.props.children !== nextProps.children` to know if the page has changed (ex: move from page Login to page AdminPanel).\n\nWhen using `PageTransition` with Redux, you may end up having the animation triggered everytime the Redux state changes (ex: state change when you enter username, `componentWillReceiveProps` is triggered but the page is still Login page). In order to resolve this, you can use `data-transition-id` for the child components.\n\n```jsx\n    <PageTransition>\n      {isLoggedIn() ?\n        <AdminPanel data-transition-id=\"admin-page\" ... />\n        :\n        <Login data-transition-id=\"login-page\" ... />\n      }\n    </PageTransition>\n```\n\nWhen `data-transition-id` prop is provided, `PageTransition` will use this value\nto compare the childrens. Now you can control exactly when will the pages are changed.\n\n# When to use this?\n\n**Pros:**\n - Give you ability to implement complex animations / transitions.\n - Keep page structure clean.\n\n**Cons:**\n - Requires extra setup for the components\n\n# Examples\n\nSee [EXAMPLES.md](https://github.com/trungdq88/react-router-page-transition/blob/master/EXAMPLES.md)\n\n# LICENSE\n\n```\nMIT License\n\nCopyright (c) 2016 Dinh Quang Trung\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/trungdq88/react-router-page-transition.git"
  },
  "scripts": {
    "build": "./node_modules/babel-cli/bin/babel.js src -d lib",
    "build-demo": "npm run clean-demo && npm run webpack && cp examples/index.html demo-build/index.html",
    "clean-demo": "rimraf demo-build/*",
    "deploy-demo": "cd demo-build && git add --all && git commit -m \"Release at $(date)\" && git push",
    "major": "npm run build && npm version major && git push && npm publish",
    "minor": "npm run build && npm version minor && git push && npm publish",
    "patch": "npm run build && npm version patch && git push && npm publish",
    "start": "NODE_ENV=development node dev-server ./webpack/config",
    "test": "echo \"Error: no test specified\" && exit 1",
    "webpack": "webpack --colors --progress --config ./webpack/config"
  },
  "version": "3.0.2"
}
