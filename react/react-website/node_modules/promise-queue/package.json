{
  "_args": [
    [
      {
        "raw": "promise-queue@^2.2.3",
        "scope": null,
        "escapedName": "promise-queue",
        "name": "promise-queue",
        "rawSpec": "^2.2.3",
        "spec": ">=2.2.3 <3.0.0",
        "type": "range"
      },
      "/Users/jbrown/Sites/10-apps-in-10-weeks/react/react-website/node_modules/react-router-page-transition"
    ]
  ],
  "_from": "promise-queue@>=2.2.3 <3.0.0",
  "_id": "promise-queue@2.2.3",
  "_inCache": true,
  "_location": "/promise-queue",
  "_nodeVersion": "1.6.1",
  "_npmOperationalInternal": {
    "host": "packages-9-west.internal.npmjs.com",
    "tmp": "tmp/promise-queue-2.2.3.tgz_1455146129558_0.2814898432698101"
  },
  "_npmUser": {
    "name": "azproduction",
    "email": "azazel.private@gmail.com"
  },
  "_npmVersion": "2.7.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "promise-queue@^2.2.3",
    "scope": null,
    "escapedName": "promise-queue",
    "name": "promise-queue",
    "rawSpec": "^2.2.3",
    "spec": ">=2.2.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-router-page-transition"
  ],
  "_resolved": "https://registry.npmjs.org/promise-queue/-/promise-queue-2.2.3.tgz",
  "_shasum": "8534d76bf4673c3baa3a82bba01bd295cc30f14f",
  "_shrinkwrap": null,
  "_spec": "promise-queue@^2.2.3",
  "_where": "/Users/jbrown/Sites/10-apps-in-10-weeks/react/react-website/node_modules/react-router-page-transition",
  "author": {
    "name": "Mikhail Davydov",
    "email": "i@azproduction.ru"
  },
  "bugs": {
    "url": "https://github.com/azproduction/promise-queue/issues"
  },
  "contributors": [
    {
      "name": "Mikhail Davydov",
      "email": "i@azproduction.ru"
    }
  ],
  "dependencies": {},
  "description": "Promise-based queue",
  "devDependencies": {
    "chai": "*",
    "coveralls": "*",
    "istanbul": "0.1.39",
    "jscs": "1.0.0",
    "jshint": "2.1.3",
    "mocha": "1.11.0",
    "mocha-istanbul": "*",
    "sinon": "*",
    "sinon-chai": "*",
    "vow": "0.4.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "8534d76bf4673c3baa3a82bba01bd295cc30f14f",
    "tarball": "https://registry.npmjs.org/promise-queue/-/promise-queue-2.2.3.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "gitHead": "b8c5722bbc5951ca89bd8cc5ef22bdcfdbcea339",
  "homepage": "https://github.com/azproduction/promise-queue#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "azproduction",
      "email": "azazel.private@gmail.com"
    }
  ],
  "name": "promise-queue",
  "optionalDependencies": {},
  "readme": "# promise-queue [![NPM Version](https://badge.fury.io/js/promise-queue.png)](https://npmjs.org/package/promise-queue) [![Build Status](https://travis-ci.org/azproduction/promise-queue.png?branch=master)](https://travis-ci.org/azproduction/promise-queue) [![Coverage Status](https://coveralls.io/repos/azproduction/promise-queue/badge.png?branch=master)](https://coveralls.io/r/azproduction/promise-queue) [![Dependency Status](https://gemnasium.com/azproduction/promise-queue.png)](https://gemnasium.com/azproduction/promise-queue)\n\nPromise-based queue\n\n## Installation\n\n`promise-queue` can be installed using `npm`:\n\n```\nnpm install promise-queue\n```\n\n## Interface\n\n - `new Queue(Number maxConcurrent, Number maxQueued): Queue`\n - `Queue#add(Function generator): Promise` - adds function argument that generates a promise to the queue\n - `Queue#getQueueLength(): Number` - returns current length of buffer(added but not started promise generators) `it <= maxQueued`\n - `Queue#getPendingLength(): Number` - returns number of pending(concurrently running) promises `it <= maxConcurrent`\n\n## Example\n\n### Configure queue\n\nBy default `Queue` tries to use global Promises, but you can specify your own promises.\n\n```js\nQueue.configure(require('vow').Promise);\n```\n\nOr use old-style promises approach:\n\n```js\nQueue.configure(function (handler) {\n    var dfd = $.Deferred();\n    try {\n        handler(dfd.resolve, dfd.reject, dfd.notify);\n    } catch (e) {\n        dfd.reject(e);\n    }\n    return dfd.promise();\n});\n```\n\n### Queue one by one example\n\n```js\nvar maxConcurrent = 1;\nvar maxQueue = Infinity;\nvar queue = new Queue(maxConcurrent, maxQueue);\n\napp.get('/version/:user/:repo', function (req, res, next) {\n    queue.add(function () {\n        // Assume that this action is a way too expensive\n        // Call of this function will be delayed on second request\n        return downloadTarballFromGithub(req.params);\n    })\n    .then(parseJson('package.json'))\n    .then(function (package) {\n        res.send(package.version);\n    })\n    .catch(next);\n});\n```\n\n### Getting number of pending promises and queue(buffered promises) length\n\n```js\nvar maxConcurrent = 1;\nvar maxQueue = 1;\nvar queue = new Queue(maxConcurrent, maxQueue);\n\nqueue.add(function () {\n    queue.getQueueLength() === 0;\n    queue.getPendingLength() === 1;\n    return somePromise();\n});\n\nqueue.add(function () {\n    queue.getQueueLength() === 0;\n    queue.getPendingLength() === 0;\n    return somePromise();\n});\n\nqueue.getQueueLength() === 1;\nqueue.getPendingLength() === 1;\n```\n\n[Live example](http://jsfiddle.net/RVuEU/1/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/azproduction/promise-queue.git"
  },
  "scripts": {
    "clean": "make clean",
    "coverage": "make coverage",
    "lint": "make lint",
    "test": "make validate"
  },
  "version": "2.2.3"
}
